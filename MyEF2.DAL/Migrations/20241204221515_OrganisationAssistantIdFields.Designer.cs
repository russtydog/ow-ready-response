// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyEF2.DAL.DatabaseContexts;

#nullable disable

namespace MyEF2.DAL.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20241204221515_OrganisationAssistantIdFields")]
    partial class OrganisationAssistantIdFields
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MyEF2.DAL.Entities.AIDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrganisationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.ToTable("AIDocuments");
                });

            modelBuilder.Entity("MyEF2.DAL.Entities.Article", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OrganisationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("MyEF2.DAL.Entities.Audit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OrganisationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PropertyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.ToTable("Audits");
                });

            modelBuilder.Entity("MyEF2.DAL.Entities.Conversation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrganisationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Started")
                        .HasColumnType("datetime2");

                    b.Property<string>("ThreadId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("MyEF2.DAL.Entities.DeviceLoginRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthenticationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LoginCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserEmail")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DeviceLoginRequests");
                });

            modelBuilder.Entity("MyEF2.DAL.Entities.EmailLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Recipient")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EmailLog");
                });

            modelBuilder.Entity("MyEF2.DAL.Entities.LoginHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LoginTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OrganisationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReturnUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("UserId");

                    b.ToTable("LoginHistory");
                });

            modelBuilder.Entity("MyEF2.DAL.Entities.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MenuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("MyEF2.DAL.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("MessageStream")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Response")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreamStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Tokens")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("MyEF2.DAL.Entities.NotificationTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsEmailNotificationTemplate")
                        .HasColumnType("bit");

                    b.Property<string>("TemplateHTML")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TemplateJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TemplateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("NotificationTemplates");
                });

            modelBuilder.Entity("MyEF2.DAL.Entities.Organisation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ABN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AIAssistantId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AIAssistantTargetWebsite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AIInstructions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ActiveSubscription")
                        .HasColumnType("bit");

                    b.Property<string>("AskAIAPI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AskAIAPIKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AskAIAssistantId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssistantName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailDomainMask")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EnableAutoSSORegistration")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableSSO")
                        .HasColumnType("bit");

                    b.Property<bool>("EnforceMFA")
                        .HasColumnType("bit");

                    b.Property<string>("EntityID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LoginURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganisationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ShowAssistant")
                        .HasColumnType("bit");

                    b.Property<string>("SigningCertificate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SkipEmailVerification")
                        .HasColumnType("bit");

                    b.Property<string>("StripeCustomerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StripeSubscriptionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubscriptionPlan")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VectorStoreId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Organisations");
                });

            modelBuilder.Entity("MyEF2.DAL.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OrganisationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("StatusId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("MyEF2.DAL.Entities.ProductTypes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductTypes");
                });

            modelBuilder.Entity("MyEF2.DAL.Entities.Requirement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequirementNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Response")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Requirements");
                });

            modelBuilder.Entity("MyEF2.DAL.Entities.Setting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("APIUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Accordian1Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Accordian1Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Accordian2Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Accordian2Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Accordian3Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Accordian3Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccordianHeroDescription1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccordianHeroDescription2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccordianHeroTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActiveItemBackgroundColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActiveItemBackgroundColorHover")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyWebsite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomersStatement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DefaultNotificationTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DefaultOrganisationId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DownloadActionDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DownloadActionTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EnableAutoRegistration")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableOrganisationSSO")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableRegistration")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableReviews")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableSSO")
                        .HasColumnType("bit");

                    b.Property<string>("EntityID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FavIcon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Feature1Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Feature1Highlight1Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Feature1Highlight1Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Feature1Hightlight2Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Feature1Hightlight2Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Feature1Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Feature2Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Feature2Highlight1Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Feature2Hightlight1Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Feature2Hightlight1Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Feature2Hightlight2Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Feature2Hightlight2Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Feature2Hightlight2Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Feature2Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Feature3Description1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Feature3Description2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Feature3Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeaturesListFeature1Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeaturesListFeature1Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeaturesListFeature1Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeaturesListFeature2Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeaturesListFeature2Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeaturesListFeature2Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeaturesListFeature3Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeaturesListFeature3Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeaturesListFeature3Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeaturesListFeature4Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeaturesListFeature4Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeaturesListFeature4Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeaturesListFeature5Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeaturesListFeature5Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeaturesListFeature5Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeaturesListFeature6Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeaturesListFeature6Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeaturesListFeature6Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeaturesListTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HeroDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HeroTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemTextColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LoginURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OpenAIKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("OrganisationsRequireSubscription")
                        .HasColumnType("bit");

                    b.Property<string>("Review1Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Review1AuthorCompany")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Review1Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Review1Rating")
                        .HasColumnType("int");

                    b.Property<string>("Review1Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Review2Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Review2AuthorCompany")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Review2Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Review2Rating")
                        .HasColumnType("int");

                    b.Property<string>("Review2Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Review3Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Review3AuthorCompany")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Review3Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Review3Rating")
                        .HasColumnType("int");

                    b.Property<string>("Review3Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Review4Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Review4AuthorCompany")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Review4Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Review4Rating")
                        .HasColumnType("int");

                    b.Property<string>("Review4Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReviewsTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SMTPPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SMTPPort")
                        .HasColumnType("int");

                    b.Property<bool>("SMTPSSL")
                        .HasColumnType("bit");

                    b.Property<string>("SMTPSenderEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SMTPSenderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SMTPServer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SMTPUsername")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SigningCertificate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SlickTrackerUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StripeCustomerPortalUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StripeMeterEventName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StripeSecretKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StripeUsagePriceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StripeWebhookId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StripeWebhookSecret")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubscribeText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TermsOfService")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("UseFrontend")
                        .HasColumnType("bit");

                    b.Property<bool>("UseOrganisations")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DefaultNotificationTemplateId");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("MyEF2.DAL.Entities.Status", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("MyEF2.DAL.Entities.StripeProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Features")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Frequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HideFromPricing")
                        .HasColumnType("bit");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrganisationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PaymentLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlanId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatementDescriptor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StripeProductId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TrialPeriodDays")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.ToTable("StripeProducts");
                });

            modelBuilder.Entity("MyEF2.DAL.Entities.StripeSubscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrganisationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StripePlanId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StripeProductPriceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StripeSessionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StripeSubscriptionId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.ToTable("StripeSubscriptions");
                });

            modelBuilder.Entity("MyEF2.DAL.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("APIKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DarkMode")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<int>("DisplayTheme")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOrgAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Locked")
                        .HasColumnType("bit");

                    b.Property<bool>("MFAEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("MFASecret")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OTPCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrganisationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Profile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyEF2.DAL.Entities.AIDocument", b =>
                {
                    b.HasOne("MyEF2.DAL.Entities.Organisation", "Organisation")
                        .WithMany("AIDocuments")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("MyEF2.DAL.Entities.Article", b =>
                {
                    b.HasOne("MyEF2.DAL.Entities.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("MyEF2.DAL.Entities.Audit", b =>
                {
                    b.HasOne("MyEF2.DAL.Entities.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId");

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("MyEF2.DAL.Entities.Conversation", b =>
                {
                    b.HasOne("MyEF2.DAL.Entities.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("MyEF2.DAL.Entities.LoginHistory", b =>
                {
                    b.HasOne("MyEF2.DAL.Entities.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyEF2.DAL.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organisation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyEF2.DAL.Entities.Menu", b =>
                {
                    b.HasOne("MyEF2.DAL.Entities.Menu", null)
                        .WithMany("SubMenus")
                        .HasForeignKey("MenuId");
                });

            modelBuilder.Entity("MyEF2.DAL.Entities.Message", b =>
                {
                    b.HasOne("MyEF2.DAL.Entities.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conversation");
                });

            modelBuilder.Entity("MyEF2.DAL.Entities.Product", b =>
                {
                    b.HasOne("MyEF2.DAL.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyEF2.DAL.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyEF2.DAL.Entities.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyEF2.DAL.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Organisation");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("MyEF2.DAL.Entities.Setting", b =>
                {
                    b.HasOne("MyEF2.DAL.Entities.NotificationTemplate", "DefaultNotificationTemplate")
                        .WithMany()
                        .HasForeignKey("DefaultNotificationTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DefaultNotificationTemplate");
                });

            modelBuilder.Entity("MyEF2.DAL.Entities.StripeProduct", b =>
                {
                    b.HasOne("MyEF2.DAL.Entities.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("MyEF2.DAL.Entities.StripeSubscription", b =>
                {
                    b.HasOne("MyEF2.DAL.Entities.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("MyEF2.DAL.Entities.User", b =>
                {
                    b.HasOne("MyEF2.DAL.Entities.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("MyEF2.DAL.Entities.Conversation", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("MyEF2.DAL.Entities.Menu", b =>
                {
                    b.Navigation("SubMenus");
                });

            modelBuilder.Entity("MyEF2.DAL.Entities.Organisation", b =>
                {
                    b.Navigation("AIDocuments");
                });
#pragma warning restore 612, 618
        }
    }
}
